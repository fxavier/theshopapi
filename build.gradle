plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'

}

group = 'com.xavier'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '12'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "https://plugins.gradle.org/m2/" }
}

sourceSets {
	generated {
		java {
			srcDirs = ["src/main/generated"]
		}
	}
}

configurations {
	querydslapt
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	compileOnly 'org.projectlombok:lombok:1.18.12'
	annotationProcessor 'org.projectlombok:lombok:1.18.12'

	//Mongobee
	compile 'org.javassist:javassist:3.18.2-GA' // workaround for ${javassist.version} placeholder issue*
	compile 'com.github.mongobee:mongobee:0.13'


	compile "com.mysema.querydsl:querydsl-mongodb:4.0.0"
	//compile "org.mongodb.morphia:morphia:${morphiaVersion}"
	//compile "com.owlike:genson:${gensonVersion}"
	querydslapt "com.mysema.querydsl:querydsl-apt:4.0.0"
	//runtime "org.hsqldb:hsqldb:${hsqldbVersion}"


	testCompileOnly 'org.projectlombok:lombok:1.18.12'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'io.projectreactor:reactor-test'
	//testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}


task generateQueryDSL(type: JavaCompile, group: "build", description: "Gera o codigo das classes do QueryDSL") {
	source = sourceSets.main.java
	classpath = configurations.compile + configurations.querydslapt
	options.compilerArgs = [
			"-proc:only",
			"-processor", "com.mysema.query.apt.morphia.MorphiaAnnotationProcessor"
	]
	destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
	dependsOn generateQueryDSL
	source generateQueryDSL.destinationDir
}

compileGeneratedJava {
	dependsOn generateQueryDSL
	classpath += sourceSets.main.runtimeClasspath
}

clean {
	delete sourceSets.generated.java.srcDirs
}


